					Assignment Week  5

Project Documentation
Purpose:
The project is a Course Enrollment and Grade Management System designed to facilitate the enrollment of students in courses, assignment of grades, and calculation of overall course grades for students.

Classes:
Student Class:

Attributes:
    • name:  Name of the student.
    • ID:  Unique identifier for the student.
    • enrolledCourses: List of course codes in which the student is enrolled.
    • courseGrades: Map of course codes to grades for the student.

Methods:
    • Student(String name, int ID): Constructor to initialize a student with a name and ID.
    • enrollCourse(Course course): Method to enroll the student in a course.
    • assignGrade(Course course, int grade): Method to assign a grade to the student for a course.
    • Getters and setters for attributes.
Course Class:

Attributes:
    • courseCode: Unique code for the course.
    • name: Name of the course.
    • maxCapacity: Maximum capacity of students that can enroll in the course.
    • totalEnrolledStudents: Static variable to track the total number of enrolled students across all instances of courses.
Methods:
    • Course(String courseCode, String name, int maxCapacity): Constructor to initialize a course with a course code, name, and maximum capacity.
    • Static methods to increment and decrement the total enrolled students.
    • Getters for attributes.
    • CourseManagement:

Attributes:
    • courses: List to store all course instances.
    • students: Map to store all student instances with their IDs.
Methods:
    • addCourse(String courseCode, String name, int maxCapacity): Method to add a new course to the system.
    • enrollStudent(Student student, Course course): Method to enroll a student in a course.
    • assignGrade(Student student, Course course, int grade): Method to assign a grade to a student for a course.
    • calculateOverallGrade(Student student): Method to calculate the overall course grades for a student.
AdministratorInterface Class:
Main class containing the user interface for interacting with the system.
Allows the administrator to perform actions like adding a new course, enrolling a student, assigning grades, and calculating overall grades.




Running the Program and Interacting with the Administrator Interface:
Run the compiled Java program using java AdministratorInterface.
Follow the instructions prompted on the console to interact with the administrator interface.
Choose options from the menu to add a new course, enroll a student, assign grades, or calculate overall grades for a student.

					Program Input Code:

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

class Student {
    private String name;
    private int ID;
    private List<String> enrolledCourses;
    private Map<String, Integer> courseGrades;

    public Student(String name, int ID) {
        this.name = name;
        this.ID = ID;
        this.enrolledCourses = new ArrayList<>();
        this.courseGrades = new HashMap<>();
    }

    // Getters 
    public String getName() {
        return name;
    }

    public int getID() {
        return ID;
    }

    public List<String> getEnrolledCourses() {
        return enrolledCourses;
    }

    public Map<String, Integer> getCourseGrades() {
        return courseGrades;
    }

    // Method to enroll student in a course
    public void enrollCourse(Course course) {
        enrolledCourses.add(course.getCourseCode());
    }

    // Method to assign grade to a student for a course
    public void assignGrade(Course course, int grade) {
        courseGrades.put(course.getCourseCode(), grade);
    }
}

class Course {
    private String courseCode;
    private String name;
    private int maxCapacity;
    private static int totalEnrolledStudents = 0;

    public Course(String courseCode, String name, int maxCapacity) {
        this.courseCode = courseCode;
        this.name = name;
        this.maxCapacity = maxCapacity;
    }

   
    public String getCourseCode() {
        return courseCode;
    }

    public String getName() {
        return name;
    }

    public int getMaxCapacity() {
        return maxCapacity;
    }

    // Static method to retrieve total enrolled students
    public static int getTotalEnrolledStudents() {
        return totalEnrolledStudents;
    }

    // Method to increment total enrolled students
    public static void incrementTotalEnrolledStudents() {
        totalEnrolledStudents++;
    }

    // Method to decrement total enrolled students
    public static void decrementTotalEnrolledStudents() {
        totalEnrolledStudents--;
    }
}

class CourseManagement {
    static List<Course> courses = new ArrayList<>();
    static Map<Integer, Student> students = new HashMap<>();

    
// Method to add new course
    public static void addCourse(String courseCode, String name, int maxCapacity) {
        Course newCourse = new Course(courseCode, name, maxCapacity);
        courses.add(newCourse);
    }

    // Method to enroll student in a course
    public static void enrollStudent(Student student, Course course) {        
        if (course.getMaxCapacity() > Course.getTotalEnrolledStudents()) {
            student.enrollCourse(course);
            Course.incrementTotalEnrolledStudents();
            System.out.println("Student enrolled in course successfully.");
        } else {
            System.out.println("Course is full. Cannot enroll student.");
        }
    }

    // Method to assign grade to a student for a course
    public static void assignGrade(Student student, Course course, int grade) {  
        student.assignGrade(course, grade);
        System.out.println("Grade assigned to student for the course successfully.");
    }

    // Method to calculate overall course grades for a student
    public static void calculateOverallGrade(Student student) {     
        Map<String, Integer> courseGrades = student.getCourseGrades();
        int totalGrade = 0;
        int numCourses = courseGrades.size();
        for (int grade : courseGrades.values()) {
            totalGrade += grade;
        }
        double overallGrade = (double) totalGrade / numCourses;
        System.out.println("Overall course grade for student " + student.getName() + " (ID: " + student.getID() + "): " + overallGrade);
    }
}

public class AdministratorInterface {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nCourse Enrollment and Grade Management System");
            System.out.println("1. Add new course");
            System.out.println("2. Enroll student in a course");
            System.out.println("3. Assign grade to a student for a course");
            System.out.println("4. Calculate overall course grades for a student");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine();        // this will take newline

            switch (choice) {
                case 1:
                    System.out.print("Enter course code: ");
                    String courseCode = scanner.nextLine();
                    System.out.print("Enter course name: ");
                    String courseName = scanner.nextLine();
                    System.out.print("Enter max capacity: ");
                    int maxCapacity = scanner.nextInt();
                    CourseManagement.addCourse(courseCode, courseName, maxCapacity);
                    break;
                case 2:
                    System.out.print("Enter student name: ");
                    String studentName = scanner.nextLine();
                    System.out.print("Enter student ID: ");
                    int studentID = scanner.nextInt();
                    scanner.nextLine();  
                    System.out.print("Enter course code to enroll student: ");
                    String enrollCourseCode = scanner.nextLine();
                    Student student = new Student(studentName, studentID);
                    Course courseToEnroll = findCourse(enrollCourseCode);
                    if (courseToEnroll != null) {
                        CourseManagement.enrollStudent(student, courseToEnroll);
                    } else {
                        System.out.println("Course not found.");
                    }
                    break;
                case 3:
                    System.out.print("Enter student ID: ");
                    int assignStudentID = scanner.nextInt();
                    scanner.nextLine();     
                    System.out.print("Enter course code: ");
                    String assignCourseCode = scanner.nextLine();
                    System.out.print("Enter grade: ");
                    int grade = scanner.nextInt();
                    Student studentToAssign = findStudent(assignStudentID);
                    Course courseToAssign = findCourse(assignCourseCode);
                    if (studentToAssign != null && courseToAssign != null) {
                        CourseManagement.assignGrade(studentToAssign, courseToAssign, grade);
                    } else {
                        System.out.println("Student or Course not found.");
                    }
                    break;
                case 4:
                    System.out.print("Enter student ID: ");
                    int calculateStudentID = scanner.nextInt();
                    Student studentToCalculate = findStudent(calculateStudentID);
                    if (studentToCalculate != null) {
                        CourseManagement.calculateOverallGrade(studentToCalculate);
                    } else {
                        System.out.println("Student not found.");
                    }
                    break;
                case 5:
                    System.out.println("Exiting...");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }

    private static Course findCourse(String courseCode) {
        for (Course course : CourseManagement.courses) {
            if (course.getCourseCode().equals(courseCode)) {
                return course;
            }
        }
        return null;
    }

    private static Student findStudent(int studentID) {
        return CourseManagement.students.get(studentID);
    }
}




Output SS:


